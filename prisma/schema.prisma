// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(cuid())
  email          String        @unique
  name           String?
  phone          String?
  role           Role          @default(CLIENT)
  clerkId        String?       @unique
  appointments   Appointment[]
  payments       Payment[]
  notifications  Notification[]
  plan           Plan?         @relation(fields: [planId], references: [id])
  planId         String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Appointment {
  id             String            @id @default(cuid())
  user           User              @relation(fields: [userId], references: [id])
  userId         String
  customer       Customer          @relation(fields: [customerId], references: [id])
  customerId     String
  date           DateTime
  duration       Int               // en minutos
  status         AppointmentStatus @default(PENDING)
  notes          String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model Customer {
  id             String        @id @default(cuid())
  name           String
  email          String?       @unique
  phone          String?
  appointments   Appointment[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Plan {
  id             String   @id @default(cuid())
  name           String   @unique
  price          Int      // en CLP o USD según implementación
  whatsappQuota  Int      // confirmaciones de WhatsApp
  emailQuota     Int      // correos mensuales de marketing
  features       String   // características como JSON string para SQLite
  users          User[]   // suscriptores de este plan
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Payment {
  id             String        @id @default(cuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  amount         Int
  status         PaymentStatus @default(PENDING)
  paymentDate    DateTime      @default(now())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Notification {
  id             String           @id @default(cuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         String
  type           NotificationType
  message        String
  read           Boolean          @default(false)
  createdAt      DateTime         @default(now())
}

enum Role {
  ADMIN
  EMPLOYEE
  CLIENT
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
}

enum NotificationType {
  EMAIL
  WHATSAPP
  SYSTEM
} 